/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DIDRegistry {
  export type ServiceStruct = {
    fragment: string;
    service_type: string;
    service_endpoint: string;
  };

  export type ServiceStructOutput = [
    fragment: string,
    service_type: string,
    service_endpoint: string
  ] & { fragment: string; service_type: string; service_endpoint: string };

  export type VerificationMethodStruct = {
    fragment: string;
    flags: BigNumberish;
    methodType: BigNumberish;
    keyData: BytesLike;
  };

  export type VerificationMethodStructOutput = [
    fragment: string,
    flags: bigint,
    methodType: bigint,
    keyData: string
  ] & { fragment: string; flags: bigint; methodType: bigint; keyData: string };

  export type DidStateStruct = {
    verificationMethods: DIDRegistry.VerificationMethodStruct[];
    services: DIDRegistry.ServiceStruct[];
    nativeControllers: AddressLike[];
    externalControllers: string[];
  };

  export type DidStateStructOutput = [
    verificationMethods: DIDRegistry.VerificationMethodStructOutput[],
    services: DIDRegistry.ServiceStructOutput[],
    nativeControllers: string[],
    externalControllers: string[]
  ] & {
    verificationMethods: DIDRegistry.VerificationMethodStructOutput[];
    services: DIDRegistry.ServiceStructOutput[];
    nativeControllers: string[];
    externalControllers: string[];
  };
}

export interface DIDRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addExternalController"
      | "addNativeController"
      | "addService"
      | "addVerificationMethod"
      | "initialize"
      | "initializeDidState"
      | "isGenerativeDidState"
      | "owner"
      | "proxiableUUID"
      | "removeExternalController"
      | "removeNativeController"
      | "removeService"
      | "removeVerificationMethod"
      | "renounceOwnership"
      | "resolveDidState"
      | "transferOwnership"
      | "updateVerificationMethodFlags"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "ControllerAdded"
      | "ControllerRemoved"
      | "Initialized"
      | "OwnershipTransferred"
      | "ServiceAdded"
      | "ServiceRemoved"
      | "Upgraded"
      | "VerificationMethodAdded"
      | "VerificationMethodFlagsUpdated"
      | "VerificationMethodRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addExternalController",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addNativeController",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addService",
    values: [AddressLike, DIDRegistry.ServiceStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addVerificationMethod",
    values: [AddressLike, DIDRegistry.VerificationMethodStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeDidState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGenerativeDidState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeExternalController",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeNativeController",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeService",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerificationMethod",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDidState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVerificationMethodFlags",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addExternalController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNativeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addService", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addVerificationMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeDidState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGenerativeDidState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeExternalController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeNativeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVerificationMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDidState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVerificationMethodFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ControllerAddedEvent {
  export type InputTuple = [
    didIdentifier: AddressLike,
    newController: BytesLike,
    isNative: boolean
  ];
  export type OutputTuple = [
    didIdentifier: string,
    newController: string,
    isNative: boolean
  ];
  export interface OutputObject {
    didIdentifier: string;
    newController: string;
    isNative: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ControllerRemovedEvent {
  export type InputTuple = [
    didIdentifier: AddressLike,
    removedController: BytesLike,
    isNative: boolean
  ];
  export type OutputTuple = [
    didIdentifier: string,
    removedController: string,
    isNative: boolean
  ];
  export interface OutputObject {
    didIdentifier: string;
    removedController: string;
    isNative: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ServiceAddedEvent {
  export type InputTuple = [didIdentifier: AddressLike, fragment: string];
  export type OutputTuple = [didIdentifier: string, fragment: string];
  export interface OutputObject {
    didIdentifier: string;
    fragment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ServiceRemovedEvent {
  export type InputTuple = [didIdentifier: AddressLike, fragment: string];
  export type OutputTuple = [didIdentifier: string, fragment: string];
  export interface OutputObject {
    didIdentifier: string;
    fragment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationMethodAddedEvent {
  export type InputTuple = [didIdentifier: AddressLike, fragment: string];
  export type OutputTuple = [didIdentifier: string, fragment: string];
  export interface OutputObject {
    didIdentifier: string;
    fragment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationMethodFlagsUpdatedEvent {
  export type InputTuple = [
    didIdentifier: AddressLike,
    fragment: string,
    oldFlags: BigNumberish,
    newFlags: BigNumberish
  ];
  export type OutputTuple = [
    didIdentifier: string,
    fragment: string,
    oldFlags: bigint,
    newFlags: bigint
  ];
  export interface OutputObject {
    didIdentifier: string;
    fragment: string;
    oldFlags: bigint;
    newFlags: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationMethodRemovedEvent {
  export type InputTuple = [didIdentifier: AddressLike, fragment: string];
  export type OutputTuple = [didIdentifier: string, fragment: string];
  export interface OutputObject {
    didIdentifier: string;
    fragment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DIDRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DIDRegistry;
  waitForDeployment(): Promise<this>;

  interface: DIDRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addExternalController: TypedContractMethod<
    [didIdentifier: AddressLike, controller: string],
    [void],
    "nonpayable"
  >;

  addNativeController: TypedContractMethod<
    [didIdentifier: AddressLike, controller: AddressLike],
    [void],
    "nonpayable"
  >;

  addService: TypedContractMethod<
    [didIdentifier: AddressLike, service: DIDRegistry.ServiceStruct],
    [void],
    "nonpayable"
  >;

  addVerificationMethod: TypedContractMethod<
    [
      didIdentifier: AddressLike,
      verificationMethod: DIDRegistry.VerificationMethodStruct
    ],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  initializeDidState: TypedContractMethod<
    [didIdentifier: AddressLike],
    [void],
    "nonpayable"
  >;

  isGenerativeDidState: TypedContractMethod<
    [didIdentifier: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  removeExternalController: TypedContractMethod<
    [didIdentifier: AddressLike, controller: string],
    [boolean],
    "nonpayable"
  >;

  removeNativeController: TypedContractMethod<
    [didIdentifier: AddressLike, controller: AddressLike],
    [boolean],
    "nonpayable"
  >;

  removeService: TypedContractMethod<
    [didIdentifier: AddressLike, fragment: string],
    [boolean],
    "nonpayable"
  >;

  removeVerificationMethod: TypedContractMethod<
    [didIdentifier: AddressLike, fragment: string],
    [boolean],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveDidState: TypedContractMethod<
    [didIdentifier: AddressLike],
    [DIDRegistry.DidStateStructOutput],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateVerificationMethodFlags: TypedContractMethod<
    [didIdentifier: AddressLike, fragment: string, flags: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addExternalController"
  ): TypedContractMethod<
    [didIdentifier: AddressLike, controller: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addNativeController"
  ): TypedContractMethod<
    [didIdentifier: AddressLike, controller: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addService"
  ): TypedContractMethod<
    [didIdentifier: AddressLike, service: DIDRegistry.ServiceStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addVerificationMethod"
  ): TypedContractMethod<
    [
      didIdentifier: AddressLike,
      verificationMethod: DIDRegistry.VerificationMethodStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initializeDidState"
  ): TypedContractMethod<[didIdentifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isGenerativeDidState"
  ): TypedContractMethod<[didIdentifier: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeExternalController"
  ): TypedContractMethod<
    [didIdentifier: AddressLike, controller: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeNativeController"
  ): TypedContractMethod<
    [didIdentifier: AddressLike, controller: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeService"
  ): TypedContractMethod<
    [didIdentifier: AddressLike, fragment: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeVerificationMethod"
  ): TypedContractMethod<
    [didIdentifier: AddressLike, fragment: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDidState"
  ): TypedContractMethod<
    [didIdentifier: AddressLike],
    [DIDRegistry.DidStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVerificationMethodFlags"
  ): TypedContractMethod<
    [didIdentifier: AddressLike, fragment: string, flags: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "ControllerAdded"
  ): TypedContractEvent<
    ControllerAddedEvent.InputTuple,
    ControllerAddedEvent.OutputTuple,
    ControllerAddedEvent.OutputObject
  >;
  getEvent(
    key: "ControllerRemoved"
  ): TypedContractEvent<
    ControllerRemovedEvent.InputTuple,
    ControllerRemovedEvent.OutputTuple,
    ControllerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ServiceAdded"
  ): TypedContractEvent<
    ServiceAddedEvent.InputTuple,
    ServiceAddedEvent.OutputTuple,
    ServiceAddedEvent.OutputObject
  >;
  getEvent(
    key: "ServiceRemoved"
  ): TypedContractEvent<
    ServiceRemovedEvent.InputTuple,
    ServiceRemovedEvent.OutputTuple,
    ServiceRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationMethodAdded"
  ): TypedContractEvent<
    VerificationMethodAddedEvent.InputTuple,
    VerificationMethodAddedEvent.OutputTuple,
    VerificationMethodAddedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationMethodFlagsUpdated"
  ): TypedContractEvent<
    VerificationMethodFlagsUpdatedEvent.InputTuple,
    VerificationMethodFlagsUpdatedEvent.OutputTuple,
    VerificationMethodFlagsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationMethodRemoved"
  ): TypedContractEvent<
    VerificationMethodRemovedEvent.InputTuple,
    VerificationMethodRemovedEvent.OutputTuple,
    VerificationMethodRemovedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "ControllerAdded(address,bytes,bool)": TypedContractEvent<
      ControllerAddedEvent.InputTuple,
      ControllerAddedEvent.OutputTuple,
      ControllerAddedEvent.OutputObject
    >;
    ControllerAdded: TypedContractEvent<
      ControllerAddedEvent.InputTuple,
      ControllerAddedEvent.OutputTuple,
      ControllerAddedEvent.OutputObject
    >;

    "ControllerRemoved(address,bytes,bool)": TypedContractEvent<
      ControllerRemovedEvent.InputTuple,
      ControllerRemovedEvent.OutputTuple,
      ControllerRemovedEvent.OutputObject
    >;
    ControllerRemoved: TypedContractEvent<
      ControllerRemovedEvent.InputTuple,
      ControllerRemovedEvent.OutputTuple,
      ControllerRemovedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ServiceAdded(address,string)": TypedContractEvent<
      ServiceAddedEvent.InputTuple,
      ServiceAddedEvent.OutputTuple,
      ServiceAddedEvent.OutputObject
    >;
    ServiceAdded: TypedContractEvent<
      ServiceAddedEvent.InputTuple,
      ServiceAddedEvent.OutputTuple,
      ServiceAddedEvent.OutputObject
    >;

    "ServiceRemoved(address,string)": TypedContractEvent<
      ServiceRemovedEvent.InputTuple,
      ServiceRemovedEvent.OutputTuple,
      ServiceRemovedEvent.OutputObject
    >;
    ServiceRemoved: TypedContractEvent<
      ServiceRemovedEvent.InputTuple,
      ServiceRemovedEvent.OutputTuple,
      ServiceRemovedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VerificationMethodAdded(address,string)": TypedContractEvent<
      VerificationMethodAddedEvent.InputTuple,
      VerificationMethodAddedEvent.OutputTuple,
      VerificationMethodAddedEvent.OutputObject
    >;
    VerificationMethodAdded: TypedContractEvent<
      VerificationMethodAddedEvent.InputTuple,
      VerificationMethodAddedEvent.OutputTuple,
      VerificationMethodAddedEvent.OutputObject
    >;

    "VerificationMethodFlagsUpdated(address,string,uint16,uint16)": TypedContractEvent<
      VerificationMethodFlagsUpdatedEvent.InputTuple,
      VerificationMethodFlagsUpdatedEvent.OutputTuple,
      VerificationMethodFlagsUpdatedEvent.OutputObject
    >;
    VerificationMethodFlagsUpdated: TypedContractEvent<
      VerificationMethodFlagsUpdatedEvent.InputTuple,
      VerificationMethodFlagsUpdatedEvent.OutputTuple,
      VerificationMethodFlagsUpdatedEvent.OutputObject
    >;

    "VerificationMethodRemoved(address,string)": TypedContractEvent<
      VerificationMethodRemovedEvent.InputTuple,
      VerificationMethodRemovedEvent.OutputTuple,
      VerificationMethodRemovedEvent.OutputObject
    >;
    VerificationMethodRemoved: TypedContractEvent<
      VerificationMethodRemovedEvent.InputTuple,
      VerificationMethodRemovedEvent.OutputTuple,
      VerificationMethodRemovedEvent.OutputObject
    >;
  };
}
